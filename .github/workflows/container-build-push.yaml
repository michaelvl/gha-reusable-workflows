on:
  workflow_call:
    inputs:
      craneVersion:
        description: "Version of crane to use"
        default: "v0.18.0"
        type: string
    outputs:
      digest:
        description: "Container image digest"
        value: ${{ jobs.push.outputs.digest }}

jobs:
  build:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      metadata: ${{ steps.meta.outputs.json }}
      tags: ${{ steps.meta.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Image metadata
        id: meta
        uses: docker/metadata-action@dbef88086f6cef02e264edb7dbf63250c17cef6c # v5.5.0
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=

      - name: DEBUG Show image metadata
        env:
          IMAGE_METADATA: ${{ needs.build.outputs.metadata }}
        run: |
          printf "${IMAGE_METADATA}" | jq .

      - name: Build Image
        id: container
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload image archive
        uses: actions/upload-artifact@694cdabd8bdb0f10b2cea11669e1bf5453eed0a6 # v4.2.0
        with:
          name: image
          path: /tmp/image.tar

  push:
    permissions:
      packages: write
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download image archive
        uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 # v4.1.1
        with:
          name: image
          path: /tmp

      - name: Install Crane
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd $(mktemp -d)
          gh release download \
          --repo google/go-containerregistry \
          --pattern "go-containerregistry_Linux_x86_64.tar.gz" "${{ inputs.craneVersion }}"
          tar xvf go-containerregistry_Linux_x86_64.tar.gz
          mkdir -p $HOME/.bin/crane
          mv ./crane $HOME/.bin/crane
          echo "$HOME/.bin/crane" >> $GITHUB_PATH
          $HOME/.bin/crane/crane version

      - name: Login to GitHub Container Registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Image
        id: push
        env:
          IMAGE_METADATA: ${{ needs.build.outputs.metadata }}
        run: |
          commit="${{ github.sha }}"
          pushedImage=$(printf "${IMAGE_METADATA}" | jq --arg commit "${commit::7}" -r '.tags | .[] | select(.|endswith($commit))')
          echo "Pushing ${pushedImage}"
          crane push /tmp/image.tar "${pushedImage}"
          echo "image=${pushedImage}" >> $GITHUB_OUTPUT

      # FIXME - need to handle tags

  sign:
    permissions:
      id-token: write
      packages: write
    runs-on: ubuntu-latest
    needs:
      - push
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Cosign install
        uses: sigstore/cosign-installer@9614fae9e5c5eddabb09f90a270fcb487c9f7149 # v3.3.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign the images with GitHub OIDC token
        env:
          DIGEST: ${{ jobs.push.outputs.digest }}
          TAGS: ${{ steps.docker_meta.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}
